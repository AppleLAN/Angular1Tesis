<?php

namespace App\Helpers\AFIP;

use Carbon\Carbon;
use DateTimeZone;
use SoapClient;

class Wsaa extends SoapClient
{
    /**
    * The service used by WSAA.
    *
    * @var string
    */
    private $service;

    /**
    * The authorization code generated by the AFIP.
    *
    * @var string
    */
    private $token;
    
    /**
    * The authorizing signature generated by the AFIP.
    *
    * @var string
    */
    private $sign;

    /**
    * The expiration time of the signature.
    *
    * @var string
    */
    private $expirationTime;

    /**
    * The reference to *Singleton* instance of this class.
    *
    * @var singleton
    */
    private static $instance;

    /**
    * Create a new Wsaa instance.
    *
    * @param string $service
    *
    * @return void
    */
    public function __construct($service)
    {
       /*  if (false === true) {
            $this->wsaaUri = config('afip.wsaa_pro');
            $this->wsaaWsdlUri = config('afip.wsaa_wsdl_pro');
        } else { */
            $this->wsaaUri = 'https://wsaahomo.afip.gov.ar/ws/services/LoginCms';
            $this->wsaaWsdlUri = 'https://wsaahomo.afip.gov.ar/ws/services/LoginCms?WSDL';
       /*  } */

        parent::SoapClient($this->wsaaWsdlUri, $this->WSAAoptions());
        $this->service = $service;
    }

    /**
    * Init
    *
    * @return void
    */
    public function init()
    {
        $accessTicket = $this->createAccessTicket();
        $signedAccessTicket = $this->signAccessTicket($accessTicket);
        $this->authentication($signedAccessTicket);

        return $this;
    }

    /**
     * Returns the *Singleton* instance of this class.
     *
     * @return Singleton The *Singleton* instance.
     */
    public static function getInstance($service)
    {
        if (null === static::$instance) {
            static::$instance = new static($service);
        }

        return static::$instance;
    }

    /**
    * Soap options.
    *
    * @return array
    */
    public function WSAAoptions()
    {
        return [
            'soap_version'   => SOAP_1_2,
            'location'       => $this->wsaaUri,
            'trace'          => true,
            'cache_wsdl'     => 0,
            'exceptions'     => true
            /*'stream_context' => stream_context_create([
                'http' => [
                    'user_agent' => 'PHPSoapClient'
                ]
            ])*/
            
        ];
    }

    /**
    * Set or Get token.
    *
    * @return object WSAA.
    */
    private function token($token = null)
    {
        if (is_null($token)) {
            return $this->token;
        }

        $this->token = $token;
        return $this;
    }

    /**
    * Set or Get sign.
    *
    * @return object WSAA.
    */
    private function sign($sign = null)
    {
        if (is_null($sign)) {
            return $this->sign;
        }

        $this->sign = $sign;
        return $this;
    }

    /**
    * Set or Get expiration time.
    *
    * @return object WSAA.
    */
    private function expiration($expirationTime = null)
    {
        if (is_null($expirationTime)) {
            return $this->expirationTime;
        }

        $this->expirationTime = $expirationTime;
        return $this;
    }

    /**
    * Create an XML document for access ticket.
    *
    * @return string returns an access ticket.
    */
    private function createAccessTicket()
    {
        $dom = new \DOMDocument("1.0", "utf-8");

        $root = $dom->appendChild($dom->createElement("loginTicketRequest"));
        $versionAttribute = $dom->createAttribute("version");
        $versionAttribute->value = "1.0";
        $root->appendChild($versionAttribute);

        $header = $root->appendChild($dom->createElement("header"));

        $header->appendChild($dom->createElement("uniqueId", rand()));
        $header->appendChild($dom->createElement("generationTime", date('c', date('U') - 60)));
        $header->appendChild($dom->createElement("expirationTime", date('c', date('U') + 60)));

        $root->appendChild($dom->createElement("service", $this->service));
        return $dom->saveXml();
    }

    /**
    * Receives the access ticket and the locations of the certificate and private key, sign the ticket.
    *
    * @return string returns the CMS message;
    */
    private function signAccessTicket($accessTicket)
    {
        $traFile = tempnam('temp', "LoginRequest.xml");
        $traCmsFile = tempnam('temp', "LoginRequest.xml.cms");

        file_put_contents($traFile, $accessTicket);

        $status = openssl_pkcs7_sign(
            $traFile,
            $traCmsFile,
            "file://" . storage_path('certificates/miClaveFiscalRequest.pem'),
            'file://' . storage_path('certificates/miClaveFiscal'),
            [],
            0
        );
        
        if (! $status) {
            throw new Exception("Error generating PKCS7 signature.");
        }

        $traCms = file_get_contents($traCmsFile);

        unlink($traFile);
        unlink($traCmsFile);

        $traCms = preg_replace("/^(.*\n){5}/", "", $traCms);

        return $traCms;
    }

    /**
    * Run the remote method and returns the ticket access.
    *
    * @return void
    */
    private function authentication($signedAccessTicket)
    {
        $ticket = storage_path('ticket.xml');

        if (file_exists($ticket)) {
            $dom = new \DOMDocument();
            $dom->load($ticket);
            $this->setCredentialsFromXML($dom);
        }

        if (is_null($this->expiration()) || $this->expiration()->isPast()) {

            $response = $this->LoginCMS(['in0' => $signedAccessTicket]);
            $dom = new \DOMDocument();
            $status = $dom->loadXml($response->loginCmsReturn);
            $dom->saveXML();
            $dom->save($ticket);
            if (! $status) {
                throw new Exception("Cannot authenticate to the AFIP.");
            }

            $this->setCredentialsFromXML($dom);
        }
    }

    /**
    * Set credentials from XML document.
    *
    * @param DOMDocument $document
    *
    * @return void
    */
    private function setCredentialsFromXML($document)
    {
        $this->token($document->getElementsByTagName("token")[0]->nodeValue);
        $this->sign($document->getElementsByTagName("sign")[0]->nodeValue);
        $this->expiration(new Carbon($document->getElementsByTagName("expirationTime")[0]->nodeValue));
    }

    /**
    * Get Auth.
    *
    * @return array
    */
    public function getAuth()
    {
        return [
            'Auth' => [
                'Token' => $this->token(),
                'Sign' => $this->sign(),
                'Cuit' => '20366017314'
            ]
        ];
    }
}
